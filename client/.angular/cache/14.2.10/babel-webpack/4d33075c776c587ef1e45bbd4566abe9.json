{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.articles = [];\n      this.orders = [];\n      this.count = 9820;\n    }\n\n    fetchArticles() {\n      this.http.get('http://localhost:8080/articles').subscribe(response => {\n        this.articles = response;\n      });\n      this.createArticleResponse = null;\n    }\n\n    saveArticle(article) {\n      this.http.post('http://localhost:8080/articles', article).subscribe(response => {\n        this.createArticleResponse = response;\n      });\n    }\n\n    getArticles() {\n      return this.articles;\n    }\n\n    isArticleCreated() {\n      return this.createArticleResponse !== undefined && this.createArticleResponse !== null;\n    }\n\n    fetchOrders() {\n      this.http.get('http://localhost:8080/orders').subscribe(response => {\n        this.orders = response;\n      }, error => {}, () => {\n        this.setOngoingOrder();\n      });\n    }\n\n    setOngoingOrder() {\n      if (this.orders !== undefined) {\n        this.ongoingOrder = undefined;\n        this.orders.forEach(order => {\n          if (order.status === \"Ongoing\") {\n            this.ongoingOrder = order;\n          }\n        });\n      }\n    }\n\n    createOrder(order) {\n      this.http.post('http://localhost:8080/orders', order).subscribe(response => {\n        this.createOrderResponse = response;\n      }, error => {}, () => {\n        this.ongoingOrder = order;\n        this.fetchOrders();\n      });\n    }\n\n    updateOrder(orderId, order) {\n      this.http.put(`http://localhost:8080/orders/${orderId}`, order).subscribe(response => {\n        this.updateOrderResponse = response;\n      }, error => {}, () => {\n        this.fetchOrders();\n      });\n    }\n\n    getOrders() {\n      return this.orders;\n    }\n\n    addArticleToOrder(article) {\n      if (this.ongoingOrder === undefined || this.ongoingOrder.status === \"Finished\") {\n        let order = {\n          reference: \"REF\" + this.count,\n          status: \"Ongoing\",\n          articles: [article],\n          orderDate: Date.now()\n        };\n        this.count++;\n        this.createOrder(order);\n      } else if (this.ongoingOrder.status === \"Ongoing\") {\n        this.ongoingOrder.articles.push(article);\n        this.updateOrder(this.ongoingOrder.id, this.ongoingOrder);\n      }\n    }\n\n    isArticleExistInOngoingOrder(article) {\n      if (this.ongoingOrder !== undefined) {\n        let exist = false;\n        this.ongoingOrder.articles.forEach(art => {\n          if (art.id === article.id) {\n            exist = true;\n          }\n        });\n        return exist;\n      }\n\n      return false;\n    }\n\n    setOrderStatus(status, order) {\n      if (this.ongoingOrder != undefined) {\n        this.ongoingOrder.status = status;\n        this.updateOrder(this.ongoingOrder.id, this.ongoingOrder);\n      }\n    }\n\n    isOrderFinished(order) {\n      if (this.ongoingOrder === undefined) {\n        return true;\n      }\n\n      if (order.id === this.ongoingOrder.id) {\n        return this.ongoingOrder.status === \"Finished\";\n      } else {\n        return true;\n      }\n    }\n\n    getOngoingOrder() {\n      return this.ongoingOrder;\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}